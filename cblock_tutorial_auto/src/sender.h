/*
 * sender microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* includes types and type metadata */
#include "../types/my_data.h"
#include "../types/my_data.h.hexarr"


/* block meta information */
char sender_meta[] =
        " { doc='',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t sender_config[] = {
        { NULL },
};

/* declaration port block ports */
ubx_port_t sender_ports[] = {
        { .name="output", .out_type_name="struct my_data", .out_data_len=1, .doc="output port for my data"  },
        { NULL },
};

/* declare a struct port_cache */
struct sender_port_cache {
        ubx_port_t* output;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct sender_port_cache *pc)
{
        pc->output = ubx_port_get(b, "output");
}


/* for each port type, declare convenience functions to read/write from ports */
def_write_fun(write_output, struct my_data)

/* block operation forward declarations */
int sender_init(ubx_block_t *b);
int sender_start(ubx_block_t *b);
void sender_stop(ubx_block_t *b);
void sender_cleanup(ubx_block_t *b);
void sender_step(ubx_block_t *b);


/* put everything together */
ubx_block_t sender_block = {
        .name = "sender",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = sender_meta,
        .configs = sender_config,
        .ports = sender_ports,

        /* ops */
        .init = sender_init,
        .start = sender_start,
        .stop = sender_stop,
        .cleanup = sender_cleanup,
        .step = sender_step,
};


/* sender module init and cleanup functions */
int sender_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;

        if(ubx_block_register(ni, &sender_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void sender_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        ubx_block_unregister(ni, "sender");
}

